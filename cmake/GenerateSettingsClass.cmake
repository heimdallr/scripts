include_guard(GLOBAL)

function(GenerateSettingsClass CLASS_NAME SETTINGS_MAP)
	GetMapKeys(${SETTINGS_MAP} keys)

	set(content "#pragma once\n")
	list(APPEND content "#include <QObject>\n")
	list(APPEND content "#include <QVariant>\n")
	list(APPEND content "#include \"fnd/memory.h\"\n")
	list(APPEND content "#include \"util/Settings.h\"\n")

	list(APPEND content "namespace HomeCompa {\n")
	list(APPEND content "class ${CLASS_NAME} : public QObject {\n")
	list(APPEND content "Q_OBJECT\n")
	foreach(name ${keys})
		list(APPEND content "Q_PROPERTY(QVariant ${name} READ get_${name} WRITE set_${name} NOTIFY ${name}_changed)\n")
	endforeach()
	list(APPEND content "private:\n")
	GrabMapVariables(${SETTINGS_MAP} ${keys})
	foreach(name ${keys})
		list(APPEND content "QVariant get_${name}() const { return m_settings->Get(\"${name}\", ${${name}})\; }\n")
		list(APPEND content "void set_${name}(const QVariant & value) { m_settings->Set(\"${name}\", value)\; emit ${name}_changed()\;}\n")
	endforeach()
	list(APPEND content "PropagateConstPtr<Settings> m_settings\;\n")
	list(APPEND content "public:\n")
	list(APPEND content "${CLASS_NAME}(std::unique_ptr<Settings> settings) : m_settings(std::move(settings)) {}\n")
	list(APPEND content "signals:\n")
	foreach(name ${keys})
		list(APPEND content "void ${name}_changed()\;\n")
	endforeach()
	list(APPEND content "}\;\n")
	list(APPEND content "}\n")
	
	set(headerFileQt "${CMAKE_CURRENT_BINARY_DIR}/Settings/${CLASS_NAME}.h")
	set(headerFileMoc "${CMAKE_CURRENT_BINARY_DIR}/Settings/moc_${CLASS_NAME}.cpp")
	
	file(WRITE ${headerFileQt} ${content})

	execute_process(COMMAND ${CMAKE_COMMAND} -DINFILE=${headerFileQt} -DOUTFILE=${headerFileMoc} -P ${CMAKE_BINARY_DIR}/MocWrapper.cmake  COMMAND_ERROR_IS_FATAL ANY)
endfunction()
